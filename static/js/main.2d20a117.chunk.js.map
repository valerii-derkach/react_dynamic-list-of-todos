{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","setSelectedUserId","useState","query","setQuery","selected","setSelected","preparedTodos","filter","todo","lowerQuery","toLowerCase","title","includes","completed","className","type","placeholder","value","onChange","event","target","map","classNames","checked","readOnly","userId","onClick","id","API_URL","CurrentUser","user","setUser","useEffect","fetch","then","response","ok","json","Promise","reject","userFromServer","catch","name","email","phone","App","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d20a117.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\n\ninterface Props {\n  todos: Todo[],\n  selectedUserId: number,\n  setSelectedUserId: (userId: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectedUserId, setSelectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [selected, setSelected] = useState('all');\n\n  const filteredTodos = todos.filter(todo => {\n    const lowerQuery = query.toLowerCase();\n\n    return todo.title.includes(lowerQuery);\n  });\n\n  const preparedTodos = filteredTodos.filter(todo => {\n    switch (selected) {\n      case 'active': {\n        return todo.completed === false;\n      }\n\n      case 'completed': {\n        return todo.completed === true;\n      }\n\n      default:\n        return todo;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        data-cy=\"filterByTitle\"\n        type=\"text\"\n        placeholder=\"enter the todo`s title\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n      <select\n        onChange={(event) => {\n          setSelected(event.target.value);\n        }}\n      >\n        <option\n          value=\"all\"\n        >\n          Show all\n        </option>\n        <option\n          value=\"active\"\n        >\n          Show active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          Show completed\n        </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul data-cy=\"listOfTodos\" className=\"TodoList__list\">\n          {preparedTodos.map(todo => (\n\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                className={classNames('TodoList__user-button button', {\n                  'TodoList__user-button--selected':\n                  todo.userId === selectedUserId,\n                })}\n                type=\"button\"\n                onClick={() => {\n                  setSelectedUserId(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(id: number): Promise<User> {\n  return fetch(`${API_URL}/users/${id}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject;\n      }\n\n      return response.json();\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../react-app-env';\nimport { getUser } from '../../api/api';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: (id: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then(userFromServer => setUser(userFromServer))\n      .catch(() => {\n        setUser(null);\n        setSelectedUserId(0);\n      });\n  }, [selectedUserId]);\n\n  return (\n    user && (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 data-cy=\"userName\" className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            setSelectedUserId(0);\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    )\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './react-app-env';\nimport { getTodos } from './api/api';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          setSelectedUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}